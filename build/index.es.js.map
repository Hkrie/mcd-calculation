{"version":3,"file":"index.es.js","sources":["../src/HelperFunctions.ts","../src/McdScan.ts"],"sourcesContent":["import * as _ from \"lodash\";\r\nimport {\r\n    CalibrationFactors,\r\n    ICalibrationMixture, IonCurrentsPerUniqAmu,\r\n    Mixture,\r\n    OptimizedMeasurementData,\r\n    PartialPressures, ProportionObjectForUniq,\r\n    Proportions, RawCalibrationMeasurementData, RawCalibrationMeasurements,\r\n    RawMeasurement,\r\n    Recipe, ResolvedIonCurrents, Sensitivities,\r\n    TestMixture, UniqMolecule\r\n} from \"./types\";\r\n\r\nconst convertToAbsoluteValueArray = (array: number[]) => {\r\n    return array.map(Math.abs);\r\n}\r\n\r\nconst isCompleteScan = (value:number[], allowedLengthOfArrays:number) =>{\r\n    return value.length === allowedLengthOfArrays\r\n}\r\n\r\nconst calcAverageValueArray = (array: number[][], allowedLengthOfArrays: number) => {\r\n    const average_values = [];\r\n    for (let i = 0; i < array[0].length; i++) {\r\n        const ion_currents_of_amu: number[] = [];\r\n        array.forEach((value, index) => {\r\n            //check if the measurement scan was complete and if so get the value\r\n            if (isCompleteScan(value, allowedLengthOfArrays)) {\r\n                ion_currents_of_amu.push(value[i])\r\n            }\r\n        })\r\n\r\n        const average_value = _.sum(convertToAbsoluteValueArray(ion_currents_of_amu)) / ion_currents_of_amu.length;\r\n        average_values.push(average_value)\r\n    }\r\n    return average_values\r\n}\r\n\r\nconst removePressureData = (completeMeasurement: RawCalibrationMeasurementData) => {\r\n    return completeMeasurement.map(data => data.values.slice(1,))\r\n}\r\n\r\nexport function OptimizeCalibrationMeasurements(\r\n    recipe: Recipe,\r\n    calibrationMixture: Mixture,\r\n    completeMeasurement: RawCalibrationMeasurements\r\n): OptimizedMeasurementData {\r\n    const amus_of_calibration_measurement: number[] = recipe.rows.slice(1).map(row => row.mass!);\r\n    const raw_values = removePressureData(completeMeasurement.data);\r\n    const average_ion_currents = calcAverageValueArray(raw_values, amus_of_calibration_measurement.length);\r\n    return {\r\n        amus: amus_of_calibration_measurement,\r\n        ion_currents: average_ion_currents\r\n    }\r\n}\r\n\r\nexport function newOptimizeMeasurement(\r\n    recipe: Recipe,\r\n    calibrationMixture: Mixture,\r\n    lastCompleteMeasurement: RawMeasurement\r\n): OptimizedMeasurementData {\r\n    const amus_of_calibration_measurement: number[] = recipe.rows.slice(1).map(row => row.mass!);\r\n    const raw_values = convertToAbsoluteValueArray(lastCompleteMeasurement.data.values.slice(1,));\r\n    const AMPLIFIER_NOISE = 2 * 10 ** -14;\r\n    const reduced_values = raw_values.map(i => i - AMPLIFIER_NOISE)\r\n        .map(i => i < 0 ? 0 : i)\r\n\r\n    return {\r\n        amus: amus_of_calibration_measurement,\r\n        ion_currents: reduced_values\r\n    }\r\n}\r\n\r\nexport function getPartialPressureForSymbol(partialPressures: PartialPressures, symbol: string) {\r\n    return partialPressures.filter(pp_obj => pp_obj.symbol === symbol)[0][\"partialPressure\"]\r\n}\r\n\r\nfunction getIonCurrentForAmu(measurementData: OptimizedMeasurementData, amu: number) {\r\n    const index = measurementData[\"amus\"].indexOf(amu);\r\n    return measurementData[\"ion_currents\"][index]\r\n}\r\n\r\nexport function calcSensitivities(calibrationMixture: ICalibrationMixture, partialPressures: PartialPressures, measurementData: OptimizedMeasurementData): Sensitivities {\r\n    return _.flatten(calibrationMixture.map(obj => {\r\n        const partial_pressure = getPartialPressureForSymbol(partialPressures, obj.symbol);\r\n        return obj.atomic_masses.map(amu => {\r\n            const ion_current = getIonCurrentForAmu(measurementData, amu);\r\n            return {\r\n                symbol: obj.symbol,\r\n                amu: amu,\r\n                sensitivity: ion_current / partial_pressure\r\n            }\r\n        })\r\n    }))\r\n}\r\n\r\nexport function getMoleculesWithUniqAmus(remainingMixture: TestMixture[]): Array<UniqMolecule> {\r\n    const arr: Array<{ symbol: string, uniq_amus: number[] }> = [];\r\n    remainingMixture.forEach(obj => {\r\n        const uniq_amus: number[] = obj.atomic_masses.filter(amu => {\r\n            const amu_occurrences = remainingMixture.filter(obj2 => obj2.atomic_masses.includes(amu));\r\n            return amu_occurrences.length === 1\r\n        });\r\n\r\n        if (!_.isEmpty(uniq_amus)) {\r\n            arr.push({\r\n                symbol: obj.symbol,\r\n                uniq_amus: uniq_amus\r\n            })\r\n        }\r\n    });\r\n    return arr;\r\n}\r\n\r\nexport function calcNormIonCurrents(resolvedIonCurrents: ResolvedIonCurrents, calibrationFactors: CalibrationFactors) {\r\n    return _.flatten(resolvedIonCurrents.map(obj => {\r\n        return obj.amus.map((amu, index) => {\r\n            const ion_current = obj.ion_currents[index];\r\n            const calibration_factor = calibrationFactors.filter(cf_obj => cf_obj.symbol === obj.symbol && cf_obj.amu === amu)[0].calibrationFactor;\r\n\r\n            return {\r\n                symbol: obj.symbol,\r\n                amu: amu,\r\n                normIonCurrent: ion_current / calibration_factor\r\n            }\r\n        })\r\n    }))\r\n}\r\n\r\nexport function getIonCurrentsPerUniqAmu(measurementData: OptimizedMeasurementData, uniqMolecule: UniqMolecule): IonCurrentsPerUniqAmu {\r\n    const uniq_ion_currents_per_amu: { amu: any; ion_current: any; }[] = [];\r\n    measurementData[\"amus\"].forEach((amu, index) => {\r\n        if (uniqMolecule.uniq_amus.includes(amu)) {\r\n            uniq_ion_currents_per_amu.push({\r\n                amu: amu,\r\n                ion_current: measurementData[\"ion_currents\"][index]\r\n            })\r\n        }\r\n    })\r\n    return uniq_ion_currents_per_amu\r\n}\r\n\r\nexport function calcIonCurrentsForMoleculeAmus(\r\n    proportionObjectForUniq: ProportionObjectForUniq,\r\n    measurementData: OptimizedMeasurementData,\r\n    uniqMolecule: UniqMolecule,\r\n    uniqIonCurrentsPerAmu: IonCurrentsPerUniqAmu\r\n) {\r\n    return proportionObjectForUniq.amu_proportions.amus.map((amu, index) => {\r\n        const md_index = measurementData[\"amus\"].indexOf(amu);\r\n        if (uniqMolecule!.uniq_amus.includes(amu)) {\r\n            const ion_current = _.flatten(uniqIonCurrentsPerAmu.filter(obj => obj!.amu === amu))[0]!.ion_current;\r\n            measurementData.ion_currents[md_index] -= ion_current;\r\n            return ion_current;\r\n        } else {// else the ion currents of the element of this amu has to be calculated\r\n            // get index of first uniq amu for the current symbol\r\n            const uniq_index = proportionObjectForUniq.amu_proportions.amus.indexOf(uniqMolecule!.uniq_amus[0]!);\r\n            const proportion_factor_uniq = proportionObjectForUniq.amu_proportions.proportions[uniq_index];\r\n            const base_ion_current = _.flatten(uniqIonCurrentsPerAmu.filter(obj => obj!.amu === uniqMolecule!.uniq_amus[0]))[0]!.ion_current;\r\n\r\n            const proportion_factor_current_amu = proportionObjectForUniq.amu_proportions.proportions[index];\r\n            const ion_current = (base_ion_current / proportion_factor_uniq) * proportion_factor_current_amu;\r\n\r\n            measurementData.ion_currents[md_index] -= ion_current;\r\n            if(measurementData.ion_currents[md_index] < 0){\r\n                measurementData.ion_currents[md_index] = 0;\r\n            }\r\n            return ion_current\r\n        }\r\n    })\r\n}\r\n\r\nexport function checkProportions(testGasMixture: TestMixture[], proportions: Proportions) {\r\n    testGasMixture.map(obj => {\r\n        const amus_of_substance = proportions.filter(proportionsObj => proportionsObj.amu_proportions.amus.sort().join(',') === obj.atomic_masses.sort().join(','));\r\n        if (_.isEmpty(amus_of_substance)) {\r\n            throw new Error(\"The calibration data is insufficient to resolve the test gas. \" +\r\n                \"Please make sure that all substances in the test mixture where predefined in the calibration measurement (also with the same atomic masses!).\")\r\n        }\r\n    })\r\n}\r\n\r\nexport function getSensitivityOf100PercentPeakOfReferenceSymbol (sensitivities:Sensitivities, referenceSymbol:string){\r\n    const reference_sensitivities = sensitivities.filter(obj => obj.symbol === referenceSymbol);\r\n    return Math.max(...reference_sensitivities.map(o => o.sensitivity))\r\n}","import {\r\n    calcIonCurrentsForMoleculeAmus,\r\n    calcNormIonCurrents,\r\n    calcSensitivities,\r\n    checkProportions,\r\n    getIonCurrentsPerUniqAmu,\r\n    getMoleculesWithUniqAmus, getSensitivityOf100PercentPeakOfReferenceSymbol,\r\n    newOptimizeMeasurement, OptimizeCalibrationMeasurements\r\n} from \"./HelperFunctions\";\r\nimport {\r\n    CalibrationFactors,\r\n    Concentrations,\r\n    ICalibrationMixture,\r\n    PartialPressures,\r\n    Proportions, RawCalibrationMeasurements,\r\n    RawMeasurement,\r\n    Recipe,\r\n    ResolvedIonCurrents,\r\n    TestMixture, UniqMolecule\r\n} from \"./types\";\r\nimport * as _ from \"lodash\";\r\n\r\n\r\nexport function calcProportions(recipe: Recipe, calibrationMixture: ICalibrationMixture, completeMeasurement: RawCalibrationMeasurements): Proportions {\r\n    const measurement_data = OptimizeCalibrationMeasurements(recipe, calibrationMixture, completeMeasurement);\r\n    return calibrationMixture.map(obj => {\r\n        const measurement_data_subset = {\r\n            amus: obj.atomic_masses,\r\n            ion_currents: obj.atomic_masses.map((amu) => {\r\n                const index = measurement_data.amus.indexOf(amu);\r\n                return measurement_data.ion_currents[index]\r\n            })\r\n        };\r\n\r\n        const hundred_percent_peak_ion_current = _.max(measurement_data_subset[\"ion_currents\"]) || 0;\r\n\r\n        return {\r\n            symbol: obj.symbol,\r\n            amu_proportions: {\r\n                amus: measurement_data_subset.amus,\r\n                proportions: measurement_data_subset.ion_currents.map(ion_current => ion_current / hundred_percent_peak_ion_current)\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function calcPartialPressures(calibrationMixture: ICalibrationMixture, completeMeasurement: RawCalibrationMeasurements): PartialPressures {\r\n    const totalPressure = completeMeasurement.data[0][\"values\"][0];\r\n    return calibrationMixture.map(obj => {\r\n        return {\r\n            symbol: obj.symbol,\r\n            partialPressure: obj.concentration * totalPressure\r\n        }\r\n    })\r\n}\r\n\r\nexport function calcCalibrationFactors(calibrationMixture: ICalibrationMixture, recipe: Recipe, completeMeasurement: RawCalibrationMeasurements, partialPressures: PartialPressures, referenceElementSymbol: string): CalibrationFactors {\r\n    const measurement_data = OptimizeCalibrationMeasurements(recipe, calibrationMixture, completeMeasurement);\r\n    const sensitivities = calcSensitivities(calibrationMixture, partialPressures, measurement_data);\r\n    const reference_sensitivity = getSensitivityOf100PercentPeakOfReferenceSymbol(sensitivities, referenceElementSymbol);\r\n    const calibrationFactors = sensitivities.map(obj => {\r\n        return {\r\n            ...obj,\r\n            calibrationFactor: obj.sensitivity / reference_sensitivity\r\n        }\r\n    })\r\n    return calibrationFactors\r\n}\r\n\r\nexport function getResolveOrder(testGasMixture: TestMixture[]): UniqMolecule[] {\r\n    const resolveOrderSymbols = [];\r\n    let remaining_mixture = [...testGasMixture];\r\n    while (remaining_mixture.length) {\r\n\r\n        const uniq_molecule_amus = getMoleculesWithUniqAmus(remaining_mixture);\r\n\r\n        if (uniq_molecule_amus.length === 0) {\r\n            throw new Error(\"There are to many overlapps in the atomic masses of the individual substances.\" +\r\n                \"Therefore the system of equations cannot be solved. Please try to use a different test gas mixture.\")\r\n        }\r\n\r\n        resolveOrderSymbols.push(...uniq_molecule_amus)\r\n        uniq_molecule_amus.forEach(item => {\r\n            _.remove(remaining_mixture, (obj) => {\r\n                return obj.symbol === item.symbol;\r\n            })\r\n        })\r\n    }\r\n    return resolveOrderSymbols\r\n}\r\n\r\nexport function resolveIonCurrents(proportions: Proportions, lastCompleteMeasurement: RawMeasurement, testGasMixture: TestMixture[], recipe: Recipe, resolveOrder?: UniqMolecule[]): ResolvedIonCurrents {\r\n    const measurement_data = newOptimizeMeasurement(recipe, testGasMixture, lastCompleteMeasurement);\r\n    checkProportions(testGasMixture, proportions)\r\n    const ion_currents_per_amu_per_molecule: ResolvedIonCurrents = [];\r\n\r\n    if (!resolveOrder) {\r\n        resolveOrder = getResolveOrder(testGasMixture);\r\n    }\r\n\r\n    resolveOrder.forEach(uniqMolecule => {\r\n        const proportion_object_for_uniq = _.flatten(proportions.filter(obj => obj.symbol === uniqMolecule!.symbol))[0];\r\n        const uniq_ion_currents_per_amu = getIonCurrentsPerUniqAmu(measurement_data, uniqMolecule);\r\n        const all_ion_currents = calcIonCurrentsForMoleculeAmus(proportion_object_for_uniq, measurement_data, uniqMolecule, uniq_ion_currents_per_amu);\r\n\r\n        ion_currents_per_amu_per_molecule.push({\r\n            symbol: uniqMolecule!.symbol,\r\n            amus: proportion_object_for_uniq.amu_proportions.amus,\r\n            ion_currents: all_ion_currents,\r\n            total_ion_current: _.sum(all_ion_currents)\r\n        })\r\n    })\r\n\r\n    return ion_currents_per_amu_per_molecule\r\n}\r\n\r\n// export function resolveIonCurrents(proportions: Proportions, lastCompleteMeasurement: RawMeasurement, testGasMixture: TestMixture[], recipe: Recipe): ResolvedIonCurrents {\r\n//     const measurement_data = newOptimizeMeasurement(recipe, testGasMixture, lastCompleteMeasurement);\r\n//     //check if all substances in testMixture have their proportions defined\r\n//     checkProportions(testGasMixture, proportions)\r\n//     const ion_currents_per_amu_per_molecule: ResolvedIonCurrents = [];\r\n//     const remaining_mixture = [...testGasMixture];\r\n//     while (remaining_mixture.length) {\r\n//\r\n//         const uniq_molecule_amus = getMoleculesWithUniqAmus(remaining_mixture);\r\n//\r\n//         if (uniq_molecule_amus.length === 0) {\r\n//             throw new Error(\"There are to many overlapps in the atomic masses of the individual substances.\" +\r\n//                 \"Therefore the system of equations cannot be solved. Please try to use a different test gas mixture.\")\r\n//         }\r\n//\r\n//\r\n//         uniq_molecule_amus.forEach((uniqMolecule) => {\r\n//             const proportion_object_for_uniq = _.flatten(proportions.filter(obj => obj.symbol === uniqMolecule!.symbol))[0];\r\n//             const uniq_ion_currents_per_amu = getIonCurrentsPerUniqAmu(measurement_data, uniqMolecule);\r\n//\r\n//             // const all_ion_currents = proportion_object_for_uniq.amu_proportions.amus.map((amu, index) => {\r\n//             //     const md_index = measurement_data[\"amus\"].indexOf(amu);\r\n//             //     if (uniqMolecule!.uniq_amus.includes(amu)) {\r\n//             //         const ion_current = _.flatten(uniq_ion_currents_per_amu.filter(obj => obj!.amu === amu))[0]!.ion_current;\r\n//             //         measurement_data.ion_currents[md_index] -= ion_current;\r\n//             //         return ion_current;\r\n//             //     } else {// else the ion currents of the element of this amu has to be calculated\r\n//             //         // get index of first uniq amu for the current symbol\r\n//             //         const uniq_index = proportion_object_for_uniq.amu_proportions.amus.indexOf(uniqMolecule!.uniq_amus[0]!);\r\n//             //         const proportion_factor_uniq = proportion_object_for_uniq.amu_proportions.proportions[uniq_index];\r\n//             //         const base_ion_current = _.flatten(uniq_ion_currents_per_amu.filter(obj => obj!.amu === uniqMolecule!.uniq_amus[0]))[0]!.ion_current;\r\n//             //\r\n//             //         const proportion_factor_current_amu = proportion_object_for_uniq.amu_proportions.proportions[index];\r\n//             //         const ion_current = (base_ion_current / proportion_factor_uniq) * proportion_factor_current_amu;\r\n//             //\r\n//             //         measurement_data.ion_currents[md_index] -= ion_current;\r\n//             //         return ion_current\r\n//             //     }\r\n//             // })\r\n//             const all_ion_currents = calcIonCurrentsForMoleculeAmus(proportion_object_for_uniq, measurement_data, uniqMolecule, uniq_ion_currents_per_amu);\r\n//\r\n//             ion_currents_per_amu_per_molecule.push({\r\n//                 symbol: uniqMolecule!.symbol,\r\n//                 amus: proportion_object_for_uniq.amu_proportions.amus,\r\n//                 ion_currents: all_ion_currents,\r\n//                 total_ion_current: _.sum(all_ion_currents)\r\n//             })\r\n//             _.remove(remaining_mixture, obj => obj.symbol === uniqMolecule!.symbol)\r\n//         })\r\n//     }\r\n//     return ion_currents_per_amu_per_molecule\r\n// }\r\n\r\nexport function calcConcentrations(testGasMixture: TestMixture[], calibrationFactors: CalibrationFactors, resolvedIonCurrents: ResolvedIonCurrents): Concentrations {\r\n    const norm_ion_currents = calcNormIonCurrents(resolvedIonCurrents, calibrationFactors);\r\n\r\n    const sum_norm_ion_currents = _.sum(norm_ion_currents.map(obj => obj.normIonCurrent));\r\n    const concentration_per_symbol_per_amu = norm_ion_currents.map(nic_obj => {\r\n        return {\r\n            symbol: nic_obj.symbol,\r\n            amu: nic_obj.amu,\r\n            concentration: nic_obj.normIonCurrent / sum_norm_ion_currents\r\n        }\r\n    });\r\n    const concentrations = testGasMixture.map(obj => {\r\n        const concentrationList = obj.atomic_masses.map(amu => {\r\n            return concentration_per_symbol_per_amu.filter(object => object.symbol === obj.symbol && object.amu === amu)[0].concentration\r\n        })\r\n        return {\r\n            symbol: obj.symbol,\r\n            amus: obj.atomic_masses,\r\n            concentrations: concentrationList,\r\n            total_concentration: _.sum(concentrationList)\r\n        }\r\n    });\r\n    return concentrations\r\n}\r\n"],"names":[],"mappings":";;AAaA,MAAM,2BAA2B,GAAG,CAAC,KAAe,KAAI;IACpD,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC/B,CAAC,CAAA;AAED,MAAM,cAAc,GAAG,CAAC,KAAc,EAAE,qBAA4B,KAAI;AACpE,IAAA,OAAO,KAAK,CAAC,MAAM,KAAK,qBAAqB,CAAA;AACjD,CAAC,CAAA;AAED,MAAM,qBAAqB,GAAG,CAAC,KAAiB,EAAE,qBAA6B,KAAI;IAC/E,MAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,MAAM,mBAAmB,GAAa,EAAE,CAAC;QACzC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,KAAI;;AAE3B,YAAA,IAAI,cAAc,CAAC,KAAK,EAAE,qBAAqB,CAAC,EAAE;gBAC9C,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;AACrC,aAAA;AACL,SAAC,CAAC,CAAA;AAEF,QAAA,MAAM,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,CAAC,GAAG,mBAAmB,CAAC,MAAM,CAAC;AAC3G,QAAA,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;AACrC,KAAA;AACD,IAAA,OAAO,cAAc,CAAA;AACzB,CAAC,CAAA;AAED,MAAM,kBAAkB,GAAG,CAAC,mBAAkD,KAAI;AAC9E,IAAA,OAAO,mBAAmB,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAA;AACjE,CAAC,CAAA;SAEe,+BAA+B,CAC3C,MAAc,EACd,kBAA2B,EAC3B,mBAA+C,EAAA;IAE/C,MAAM,+BAA+B,GAAa,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAK,CAAC,CAAC;IAC7F,MAAM,UAAU,GAAG,kBAAkB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAChE,MAAM,oBAAoB,GAAG,qBAAqB,CAAC,UAAU,EAAE,+BAA+B,CAAC,MAAM,CAAC,CAAC;IACvG,OAAO;AACH,QAAA,IAAI,EAAE,+BAA+B;AACrC,QAAA,YAAY,EAAE,oBAAoB;KACrC,CAAA;AACL,CAAC;SAEe,sBAAsB,CAClC,MAAc,EACd,kBAA2B,EAC3B,uBAAuC,EAAA;IAEvC,MAAM,+BAA+B,GAAa,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAK,CAAC,CAAC;AAC7F,IAAA,MAAM,UAAU,GAAG,2BAA2B,CAAC,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC;IAC9F,MAAM,eAAe,GAAG,CAAC,GAAG,IAAA,CAAA,GAAA,CAAA,EAAE,EAAI,CAAC,EAAE,CAAA,CAAC;AACtC,IAAA,MAAM,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC;AAC1D,SAAA,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;IAE5B,OAAO;AACH,QAAA,IAAI,EAAE,+BAA+B;AACrC,QAAA,YAAY,EAAE,cAAc;KAC/B,CAAA;AACL,CAAC;AAEe,SAAA,2BAA2B,CAAC,gBAAkC,EAAE,MAAc,EAAA;IAC1F,OAAO,gBAAgB,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAA;AAC5F,CAAC;AAED,SAAS,mBAAmB,CAAC,eAAyC,EAAE,GAAW,EAAA;IAC/E,MAAM,KAAK,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACnD,IAAA,OAAO,eAAe,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,CAAA;AACjD,CAAC;SAEe,iBAAiB,CAAC,kBAAuC,EAAE,gBAAkC,EAAE,eAAyC,EAAA;IACpJ,OAAO,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,IAAG;QAC1C,MAAM,gBAAgB,GAAG,2BAA2B,CAAC,gBAAgB,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;QACnF,OAAO,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,IAAG;YAC/B,MAAM,WAAW,GAAG,mBAAmB,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;YAC9D,OAAO;gBACH,MAAM,EAAE,GAAG,CAAC,MAAM;AAClB,gBAAA,GAAG,EAAE,GAAG;gBACR,WAAW,EAAE,WAAW,GAAG,gBAAgB;aAC9C,CAAA;AACL,SAAC,CAAC,CAAA;KACL,CAAC,CAAC,CAAA;AACP,CAAC;AAEK,SAAU,wBAAwB,CAAC,gBAA+B,EAAA;IACpE,MAAM,GAAG,GAAmD,EAAE,CAAC;AAC/D,IAAA,gBAAgB,CAAC,OAAO,CAAC,GAAG,IAAG;QAC3B,MAAM,SAAS,GAAa,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,IAAG;AACvD,YAAA,MAAM,eAAe,GAAG,gBAAgB,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1F,YAAA,OAAO,eAAe,CAAC,MAAM,KAAK,CAAC,CAAA;AACvC,SAAC,CAAC,CAAC;AAEH,QAAA,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACvB,GAAG,CAAC,IAAI,CAAC;gBACL,MAAM,EAAE,GAAG,CAAC,MAAM;AAClB,gBAAA,SAAS,EAAE,SAAS;AACvB,aAAA,CAAC,CAAA;AACL,SAAA;AACL,KAAC,CAAC,CAAC;AACH,IAAA,OAAO,GAAG,CAAC;AACf,CAAC;AAEe,SAAA,mBAAmB,CAAC,mBAAwC,EAAE,kBAAsC,EAAA;IAChH,OAAO,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,IAAG;QAC3C,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,KAAI;YAC/B,MAAM,WAAW,GAAG,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AAC5C,YAAA,MAAM,kBAAkB,GAAG,kBAAkB,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC;YAExI,OAAO;gBACH,MAAM,EAAE,GAAG,CAAC,MAAM;AAClB,gBAAA,GAAG,EAAE,GAAG;gBACR,cAAc,EAAE,WAAW,GAAG,kBAAkB;aACnD,CAAA;AACL,SAAC,CAAC,CAAA;KACL,CAAC,CAAC,CAAA;AACP,CAAC;AAEe,SAAA,wBAAwB,CAAC,eAAyC,EAAE,YAA0B,EAAA;IAC1G,MAAM,yBAAyB,GAAsC,EAAE,CAAC;IACxE,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,KAAI;QAC3C,IAAI,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACtC,yBAAyB,CAAC,IAAI,CAAC;AAC3B,gBAAA,GAAG,EAAE,GAAG;AACR,gBAAA,WAAW,EAAE,eAAe,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC;AACtD,aAAA,CAAC,CAAA;AACL,SAAA;AACL,KAAC,CAAC,CAAA;AACF,IAAA,OAAO,yBAAyB,CAAA;AACpC,CAAC;AAEK,SAAU,8BAA8B,CAC1C,uBAAgD,EAChD,eAAyC,EACzC,YAA0B,EAC1B,qBAA4C,EAAA;AAE5C,IAAA,OAAO,uBAAuB,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,KAAI;QACnE,MAAM,QAAQ,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACtD,IAAI,YAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACvC,MAAM,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,MAAM,CAAC,GAAG,IAAI,GAAI,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAE,CAAC,WAAW,CAAC;AACrG,YAAA,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC;AACtD,YAAA,OAAO,WAAW,CAAC;AACtB,SAAA;AAAM,aAAA;;AAEH,YAAA,MAAM,UAAU,GAAG,uBAAuB,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,YAAa,CAAC,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC;YACrG,MAAM,sBAAsB,GAAG,uBAAuB,CAAC,eAAe,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AAC/F,YAAA,MAAM,gBAAgB,GAAG,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,MAAM,CAAC,GAAG,IAAI,GAAI,CAAC,GAAG,KAAK,YAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,CAAC,WAAW,CAAC;YAEjI,MAAM,6BAA6B,GAAG,uBAAuB,CAAC,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACjG,MAAM,WAAW,GAAG,CAAC,gBAAgB,GAAG,sBAAsB,IAAI,6BAA6B,CAAC;AAEhG,YAAA,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC;YACtD,IAAG,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAC;AAC1C,gBAAA,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC9C,aAAA;AACD,YAAA,OAAO,WAAW,CAAA;AACrB,SAAA;AACL,KAAC,CAAC,CAAA;AACN,CAAC;AAEe,SAAA,gBAAgB,CAAC,cAA6B,EAAE,WAAwB,EAAA;AACpF,IAAA,cAAc,CAAC,GAAG,CAAC,GAAG,IAAG;AACrB,QAAA,MAAM,iBAAiB,GAAG,WAAW,CAAC,MAAM,CAAC,cAAc,IAAI,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAC5J,QAAA,IAAI,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,gEAAgE;AAC5E,gBAAA,+IAA+I,CAAC,CAAA;AACvJ,SAAA;AACL,KAAC,CAAC,CAAA;AACN,CAAC;AAEe,SAAA,+CAA+C,CAAE,aAA2B,EAAE,eAAsB,EAAA;AAChH,IAAA,MAAM,uBAAuB,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,eAAe,CAAC,CAAC;AAC5F,IAAA,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC,CAAA;AACvE;;SClKgB,eAAe,CAAC,MAAc,EAAE,kBAAuC,EAAE,mBAA+C,EAAA;IACpI,MAAM,gBAAgB,GAAG,+BAA+B,CAAC,MAAM,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,CAAC;AAC1G,IAAA,OAAO,kBAAkB,CAAC,GAAG,CAAC,GAAG,IAAG;AAChC,QAAA,MAAM,uBAAuB,GAAG;YAC5B,IAAI,EAAE,GAAG,CAAC,aAAa;YACvB,YAAY,EAAE,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,KAAI;gBACxC,MAAM,KAAK,GAAG,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACjD,gBAAA,OAAO,gBAAgB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA;AAC/C,aAAC,CAAC;SACL,CAAC;AAEF,QAAA,MAAM,gCAAgC,GAAG,CAAC,CAAC,GAAG,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC;QAE7F,OAAO;YACH,MAAM,EAAE,GAAG,CAAC,MAAM;AAClB,YAAA,eAAe,EAAE;gBACb,IAAI,EAAE,uBAAuB,CAAC,IAAI;AAClC,gBAAA,WAAW,EAAE,uBAAuB,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,IAAI,WAAW,GAAG,gCAAgC,CAAC;AACvH,aAAA;SACJ,CAAA;AACL,KAAC,CAAC,CAAA;AACN,CAAC;AAEe,SAAA,oBAAoB,CAAC,kBAAuC,EAAE,mBAA+C,EAAA;AACzH,IAAA,MAAM,aAAa,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,IAAA,OAAO,kBAAkB,CAAC,GAAG,CAAC,GAAG,IAAG;QAChC,OAAO;YACH,MAAM,EAAE,GAAG,CAAC,MAAM;AAClB,YAAA,eAAe,EAAE,GAAG,CAAC,aAAa,GAAG,aAAa;SACrD,CAAA;AACL,KAAC,CAAC,CAAA;AACN,CAAC;AAEK,SAAU,sBAAsB,CAAC,kBAAuC,EAAE,MAAc,EAAE,mBAA+C,EAAE,gBAAkC,EAAE,sBAA8B,EAAA;IAC/M,MAAM,gBAAgB,GAAG,+BAA+B,CAAC,MAAM,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,CAAC;IAC1G,MAAM,aAAa,GAAG,iBAAiB,CAAC,kBAAkB,EAAE,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;IAChG,MAAM,qBAAqB,GAAG,+CAA+C,CAAC,aAAa,EAAE,sBAAsB,CAAC,CAAC;IACrH,MAAM,kBAAkB,GAAG,aAAa,CAAC,GAAG,CAAC,GAAG,IAAG;QAC/C,OACO,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAG,KACN,iBAAiB,EAAE,GAAG,CAAC,WAAW,GAAG,qBAAqB,EAC7D,CAAA,CAAA;AACL,KAAC,CAAC,CAAA;AACF,IAAA,OAAO,kBAAkB,CAAA;AAC7B,CAAC;AAEK,SAAU,eAAe,CAAC,cAA6B,EAAA;IACzD,MAAM,mBAAmB,GAAG,EAAE,CAAC;AAC/B,IAAA,IAAI,iBAAiB,GAAG,CAAC,GAAG,cAAc,CAAC,CAAC;IAC5C,OAAO,iBAAiB,CAAC,MAAM,EAAE;AAE7B,QAAA,MAAM,kBAAkB,GAAG,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;AAEvE,QAAA,IAAI,kBAAkB,CAAC,MAAM,KAAK,CAAC,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,gFAAgF;AAC5F,gBAAA,qGAAqG,CAAC,CAAA;AAC7G,SAAA;AAED,QAAA,mBAAmB,CAAC,IAAI,CAAC,GAAG,kBAAkB,CAAC,CAAA;AAC/C,QAAA,kBAAkB,CAAC,OAAO,CAAC,IAAI,IAAG;YAC9B,CAAC,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,GAAG,KAAI;AAChC,gBAAA,OAAO,GAAG,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC;AACtC,aAAC,CAAC,CAAA;AACN,SAAC,CAAC,CAAA;AACL,KAAA;AACD,IAAA,OAAO,mBAAmB,CAAA;AAC9B,CAAC;AAEK,SAAU,kBAAkB,CAAC,WAAwB,EAAE,uBAAuC,EAAE,cAA6B,EAAE,MAAc,EAAE,YAA6B,EAAA;IAC9K,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,MAAM,EAAE,cAAc,EAAE,uBAAuB,CAAC,CAAC;AACjG,IAAA,gBAAgB,CAAC,cAAc,EAAE,WAAW,CAAC,CAAA;IAC7C,MAAM,iCAAiC,GAAwB,EAAE,CAAC;IAElE,IAAI,CAAC,YAAY,EAAE;AACf,QAAA,YAAY,GAAG,eAAe,CAAC,cAAc,CAAC,CAAC;AAClD,KAAA;AAED,IAAA,YAAY,CAAC,OAAO,CAAC,YAAY,IAAG;QAChC,MAAM,0BAA0B,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,YAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChH,MAAM,yBAAyB,GAAG,wBAAwB,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;AAC3F,QAAA,MAAM,gBAAgB,GAAG,8BAA8B,CAAC,0BAA0B,EAAE,gBAAgB,EAAE,YAAY,EAAE,yBAAyB,CAAC,CAAC;QAE/I,iCAAiC,CAAC,IAAI,CAAC;YACnC,MAAM,EAAE,YAAa,CAAC,MAAM;AAC5B,YAAA,IAAI,EAAE,0BAA0B,CAAC,eAAe,CAAC,IAAI;AACrD,YAAA,YAAY,EAAE,gBAAgB;AAC9B,YAAA,iBAAiB,EAAE,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC;AAC7C,SAAA,CAAC,CAAA;AACN,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,iCAAiC,CAAA;AAC5C,CAAC;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;SAEgB,kBAAkB,CAAC,cAA6B,EAAE,kBAAsC,EAAE,mBAAwC,EAAA;IAC9I,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;AAEvF,IAAA,MAAM,qBAAqB,GAAG,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;IACtF,MAAM,gCAAgC,GAAG,iBAAiB,CAAC,GAAG,CAAC,OAAO,IAAG;QACrE,OAAO;YACH,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,GAAG,EAAE,OAAO,CAAC,GAAG;AAChB,YAAA,aAAa,EAAE,OAAO,CAAC,cAAc,GAAG,qBAAqB;SAChE,CAAA;AACL,KAAC,CAAC,CAAC;IACH,MAAM,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,IAAG;QAC5C,MAAM,iBAAiB,GAAG,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,IAAG;YAClD,OAAO,gCAAgC,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAA;AACjI,SAAC,CAAC,CAAA;QACF,OAAO;YACH,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,IAAI,EAAE,GAAG,CAAC,aAAa;AACvB,YAAA,cAAc,EAAE,iBAAiB;AACjC,YAAA,mBAAmB,EAAE,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC;SAChD,CAAA;AACL,KAAC,CAAC,CAAC;AACH,IAAA,OAAO,cAAc,CAAA;AACzB;;;;"}