{"version":3,"file":"index.es.js","sources":["../src/HelperFunctions.ts","../src/McdScan.ts"],"sourcesContent":["import * as _ from \"lodash\";\r\nimport {\r\n    CalibrationFactors,\r\n    ICalibrationMixture, ISensitivities,\r\n    Mixture,\r\n    OptimizedMeasurementData,\r\n    PartialPressures,\r\n    Proportions, RawCalibrationMeasurementData, RawCalibrationMeasurements,\r\n    RawMeasurement,\r\n    Recipe, ResolvedIonCurrents, Sensitivities,\r\n    TestMixture\r\n} from \"./types\";\r\n\r\nconst convertToAbsoluteValueArray = (array:number[]) => {\r\n    return array.map(Math.abs);\r\n}\r\n\r\nconst calcAverageValueArray = (array:number[][], allowedLengthOfArrays:number) =>{\r\n    const average_values = [];\r\n    for(let i = 0; i<array.length;i++){\r\n        const ion_currents_of_amu:number[] = [];\r\n        array.forEach((value, index) =>{\r\n            //check if the measurement scan was complete and if so get the value\r\n            if(value.length === allowedLengthOfArrays){\r\n                ion_currents_of_amu.push(value[i])\r\n            }\r\n        })\r\n        const average_value = _.sum(convertToAbsoluteValueArray(ion_currents_of_amu)) / ion_currents_of_amu.length;\r\n        average_values.push(average_value)\r\n    }\r\n    return average_values\r\n}\r\n\r\nconst removePressureData = (completeMeasurement: RawCalibrationMeasurementData) =>{\r\n    return completeMeasurement.map(data => data.values.slice(1,))\r\n}\r\n\r\nexport function OptimizeCalibrationMeasurements(\r\n    recipe: Recipe,\r\n    calibrationMixture: Mixture,\r\n    completeMeasurement: RawCalibrationMeasurements\r\n): OptimizedMeasurementData {\r\n    // get amus\r\n    const amus_of_calibration_measurement: number[] = recipe.rows.slice(1).map(row => row.mass!);\r\n    const raw_values = removePressureData(completeMeasurement.data)\r\n    const average_ion_currents = calcAverageValueArray(raw_values, amus_of_calibration_measurement.length)\r\n    // const AMPLIFIER_NOISE = 2 * 10 ** -14;\r\n    // const reduced_values = raw_values.map(i => i - AMPLIFIER_NOISE)\r\n    //     .map(i => i < 0 ? 0 : i)\r\n\r\n    return {\r\n        amus: amus_of_calibration_measurement,\r\n        ion_currents: average_ion_currents\r\n    }\r\n}\r\n\r\nexport function newOptimizeMeasurement(\r\n    recipe: Recipe,\r\n    calibrationMixture: Mixture,\r\n    lastCompleteMeasurement: RawMeasurement\r\n): OptimizedMeasurementData {\r\n    // get amus\r\n    const amus_of_calibration_measurement: number[] = recipe.rows.slice(1).map(row => row.mass!);\r\n    // get ion_currents\r\n    const raw_values = convertToAbsoluteValueArray(lastCompleteMeasurement.data.values.slice(1,));\r\n    // const AMPLIFIER_NOISE = 2 * 10 ** -14;\r\n    // const reduced_values = raw_values.map(i => i - AMPLIFIER_NOISE)\r\n    //     .map(i => i < 0 ? 0 : i)\r\n\r\n    return {\r\n        amus: amus_of_calibration_measurement,\r\n        ion_currents: raw_values\r\n    }\r\n}\r\n\r\nexport function getPartialPressureForSymbol(partialPressures: PartialPressures, symbol: string) {\r\n    return partialPressures.filter(pp_obj => pp_obj.symbol === symbol)[0][\"partialPressure\"]\r\n}\r\n\r\nfunction getIonCurrentForAmu(measurementData: OptimizedMeasurementData, amu: number) {\r\n    const index = measurementData[\"amus\"].indexOf(amu);\r\n    return measurementData[\"ion_currents\"][index]\r\n}\r\n\r\nexport function calcSensitivities(calibrationMixture: ICalibrationMixture, partialPressures: PartialPressures, measurementData: OptimizedMeasurementData): Sensitivities {\r\n    return _.flatten(calibrationMixture.map(obj => {\r\n        const partial_pressure = getPartialPressureForSymbol(partialPressures, obj.symbol);\r\n        return obj.atomic_masses.map(amu => {\r\n            const ion_current = getIonCurrentForAmu(measurementData, amu);\r\n            return {\r\n                symbol: obj.symbol,\r\n                amu: amu,\r\n                sensitivity: ion_current / partial_pressure\r\n            }\r\n        })\r\n    }))\r\n}\r\n\r\nexport function getMoleculesWithUniqAmus(remainingMixture: TestMixture[]): Array<{ symbol: string, uniq_amus: number[] }> {\r\n    const arr: Array<{ symbol: string, uniq_amus: number[] }> = [];\r\n    remainingMixture.forEach(obj => {\r\n        const uniq_amus: number[] = obj.atomic_masses.filter(amu => {\r\n            const amu_occurrences = remainingMixture.filter(obj2 => obj2.atomic_masses.includes(amu));\r\n            return amu_occurrences.length === 1\r\n        });\r\n\r\n        if (!_.isEmpty(uniq_amus)) {\r\n            arr.push({\r\n                symbol: obj.symbol,\r\n                uniq_amus: uniq_amus\r\n            })\r\n        }\r\n    });\r\n    return arr;\r\n}\r\n\r\nexport function calcNormIonCurrents(resolvedIonCurrents: ResolvedIonCurrents, calibrationFactors: CalibrationFactors) {\r\n    return _.flatten(resolvedIonCurrents.map(obj => {\r\n        return obj.amus.map((amu, index) => {\r\n            const ion_current = obj.ion_currents[index];\r\n            const calibration_factor = calibrationFactors.filter(cf_obj => cf_obj.symbol === obj.symbol && cf_obj.amu === amu)[0].calibrationFactor;\r\n\r\n            return {\r\n                symbol: obj.symbol,\r\n                amu: amu,\r\n                normIonCurrent: ion_current / calibration_factor\r\n            }\r\n        })\r\n    }))\r\n}\r\n\r\nexport function getIonCurrentsPerUniqAmu(measurementData: OptimizedMeasurementData, uniqMolecule: { symbol: string, uniq_amus: number[] }): Array<{ amu: number; ion_current: number; }> {\r\n    const uniq_ion_currents_per_amu: { amu: any; ion_current: any; }[] = [];\r\n    measurementData[\"amus\"].forEach((amu, index) => {\r\n        if (uniqMolecule.uniq_amus.includes(amu)) {\r\n            uniq_ion_currents_per_amu.push({\r\n                amu: amu,\r\n                ion_current: measurementData[\"ion_currents\"][index]\r\n            })\r\n        }\r\n    })\r\n    return uniq_ion_currents_per_amu\r\n}\r\n\r\nexport function calcIonCurrentsForMoleculeAmus(\r\n    proportionObjectForUniq: { symbol: string, amu_proportions: { amus: number[], proportions: number[] } },\r\n    measurementData: OptimizedMeasurementData,\r\n    uniqMolecule: { symbol: string, uniq_amus: number[] },\r\n    uniqIonCurrentsPerAmu: { amu: number, ion_current: number }[]\r\n) {\r\n    return proportionObjectForUniq.amu_proportions.amus.map((amu, index) => {\r\n        const md_index = measurementData[\"amus\"].indexOf(amu);\r\n        if (uniqMolecule!.uniq_amus.includes(amu)) {\r\n            const ion_current = _.flatten(uniqIonCurrentsPerAmu.filter(obj => obj!.amu === amu))[0]!.ion_current;\r\n            measurementData.ion_currents[md_index] -= ion_current;\r\n            return ion_current;\r\n        } else {// else the ion currents of the element of this amu has to be calculated\r\n            // get index of first uniq amu for the current symbol\r\n            const uniq_index = proportionObjectForUniq.amu_proportions.amus.indexOf(uniqMolecule!.uniq_amus[0]!);\r\n            const proportion_factor_uniq = proportionObjectForUniq.amu_proportions.proportions[uniq_index];\r\n            const base_ion_current = _.flatten(uniqIonCurrentsPerAmu.filter(obj => obj!.amu === uniqMolecule!.uniq_amus[0]))[0]!.ion_current;\r\n\r\n            const proportion_factor_current_amu = proportionObjectForUniq.amu_proportions.proportions[index];\r\n            const ion_current = (base_ion_current / proportion_factor_uniq) * proportion_factor_current_amu;\r\n\r\n            measurementData.ion_currents[md_index] -= ion_current;\r\n            return ion_current\r\n        }\r\n    })\r\n}\r\n\r\n// export function optimizeCalibrationMeasurementData(rawPrismaproCalibrationMeasurementData: RawMeasurement, ppAMU: number, calibrationMixture: ICalibrationMixture) {\r\n//     const usableDataOfFirstDataset = rawPrismaproCalibrationMeasurementData.data[-2][\"values\"].slice(2,);\r\n//\r\n//     const prismaProMeasurementData = {\r\n//         \"amus\": _.range(0, usableDataOfFirstDataset.length * (1 / ppAMU), 1 / ppAMU),\r\n//         \"ion_currents\": absoluteValueArray(usableDataOfFirstDataset)\r\n//     }\r\n//\r\n//     const wholeAmuData = {\r\n//         \"amus\": roundToWholeNumbers(getEveryNth(prismaProMeasurementData[\"amus\"], ppAMU)),\r\n//         \"ion_currents\": getEveryNth(prismaProMeasurementData[\"ion_currents\"], ppAMU),\r\n//     }\r\n//\r\n//     const amuList: number[] = get100PercentPeaks(calibrationMixture);\r\n//     const IntensitiesForAmus: number[] = getIntensitiesForAmus(amuList, wholeAmuData)\r\n//\r\n//     return {\r\n//         \"amus\": amuList,\r\n//         \"ion_currents\": IntensitiesForAmus\r\n//     };\r\n// }\r\n\r\n// export function optimizeMeasurementData(rawPrismaproMeasurementData: RawMeasurement, ppAMU: number, calibrationMixture: ICalibrationMixture) {\r\n//     const usableDataOfFirstDataset = rawPrismaproMeasurementData.data[0][\"values\"].slice(2,);\r\n//\r\n//     const prismaProMeasurementData = {\r\n//         \"amus\": _.range(0, usableDataOfFirstDataset.length * (1 / ppAMU), 1 / ppAMU),\r\n//         \"ion_currents\": absoluteValueArray(usableDataOfFirstDataset)\r\n//     }\r\n//\r\n//     const wholeAmuData = {\r\n//         \"amus\": roundToWholeNumbers(getEveryNth(prismaProMeasurementData[\"amus\"], ppAMU)),\r\n//         \"ion_currents\": getEveryNth(prismaProMeasurementData[\"ion_currents\"], ppAMU),\r\n//     }\r\n//\r\n//     const amuList: number[] = get100PercentPeaks(calibrationMixture);\r\n//     const IntensitiesForAmus: number[] = getIntensitiesForAmus(amuList, wholeAmuData)\r\n//\r\n//     return {\r\n//         \"amus\": amuList,\r\n//         \"ion_currents\": IntensitiesForAmus\r\n//     };\r\n// }\r\n\r\n// function absoluteValueArray(array: number[]) {\r\n//     return array.map(Math.abs);\r\n// }\r\n\r\n// function getEveryNth(arr: Array<any>, nth: number) {\r\n//     const result = [];\r\n//\r\n//     for (let i = 0; i < arr.length; i += nth) {\r\n//         result.push(arr[i]);\r\n//     }\r\n//\r\n//     return result;\r\n// }\r\n\r\n// function roundToWholeNumbers(arrOfNumbers: number[]) {\r\n//     return arrOfNumbers.map(num => {\r\n//         return Math.round(num);\r\n//     });\r\n// }\r\n\r\n// function getIntensitiesForAmus(amuList: number[], wholeAmuData: { amus: number[], ion_currents: number[] }) {\r\n//     return amuList.map(amu => {\r\n//         const indexOfAmu = wholeAmuData.amus.indexOf(amu);\r\n//         return wholeAmuData.ion_currents[indexOfAmu]\r\n//     })\r\n// }\r\n\r\n// function get100PercentPeaks(calibrationMixture: ICalibrationMixture) {\r\n//     const allAmuList = calibrationMixture.map(element => element[\"atomic_masses\"][0]);\r\n//\r\n//     return _.uniq(allAmuList)\r\n// }\r\n\r\n// export function calcSensitivities(\r\n//     optimizedCalibrationMeasurementData: IOptimizedMeasurementData,\r\n//     calibrationMixture: ICalibrationMixture,\r\n//     totalPressure: number\r\n// ) {\r\n//     const partialPressures: IPartialPressures = calcPartialPressures(calibrationMixture, totalPressure);\r\n//\r\n//     const sensitivities = {};\r\n//     calibrationMixture.forEach(elementData => {\r\n//         const atomic_mass = elementData[\"atomic_masses\"][0];\r\n//         const intensityIndex = optimizedCalibrationMeasurementData.amus.indexOf(atomic_mass);\r\n//         const intensity = optimizedCalibrationMeasurementData.ion_currents[intensityIndex];\r\n//\r\n//         sensitivities[elementData.symbol] = intensity / partialPressures[elementData.symbol]\r\n//     })\r\n//     return sensitivities;\r\n// }\r\n\r\n// export function calcPartialPressures(calibrationMixture: ICalibrationMixture, totalPressure: number) {\r\n//     const partialPressures = {}\r\n//     calibrationMixture.forEach(elementData => {\r\n//         partialPressures[elementData.symbol] = elementData.concentration * totalPressure\r\n//     })\r\n//     return partialPressures\r\n// }\r\n\r\n// export function calcConcentrations(\r\n//     calibrationMixture: ICalibrationMixture,\r\n//     sensitivities: ISensitivities,\r\n//     REFERENCE_ELEMENT_SYMBOL: string,\r\n//     optimizedTestGasMeasurementData: IOptimizedMeasurementData\r\n// ) {\r\n//     const calibrationFactors: ICalibrationFactors = calcCalibrationFactors(calibrationMixture, sensitivities, REFERENCE_ELEMENT_SYMBOL);\r\n//     const normIntensities: INormIntensities = calcNormIntensities(calibrationMixture, optimizedTestGasMeasurementData, calibrationFactors);\r\n//     const sumNormIntensities: number = _.sum(Object.values(normIntensities));\r\n//\r\n//     const result_concentrations = {};\r\n//     calibrationMixture.forEach(elementData => {\r\n//         result_concentrations[elementData.symbol] = normIntensities[elementData.symbol] / sumNormIntensities\r\n//     })\r\n//     return result_concentrations;\r\n// }\r\n\r\n// function calcCalibrationFactors(calibrationMixture: ICalibrationMixture, sensitivities: ISensitivities, REFERENCE_ELEMENT_SYMBOL: string) {\r\n//     const calibrationFactors = {};\r\n//     calibrationMixture.forEach(elementData => {\r\n//         calibrationFactors[elementData.symbol] = sensitivities[elementData.symbol] / sensitivities[REFERENCE_ELEMENT_SYMBOL]\r\n//     })\r\n//     return calibrationFactors\r\n// }\r\n//\r\n// function calcNormIntensities(calibrationMixture: ICalibrationMixture, optimizedTestGasMeasurementData: IOptimizedMeasurementData, calibrationFactors: ICalibrationFactors) {\r\n//     const normIntensities = {};\r\n//     calibrationMixture.forEach(elementData => {\r\n//         const atomic_mass = elementData[\"atomic_masses\"][0];\r\n//         const intensityIndex = optimizedTestGasMeasurementData.amus.indexOf(atomic_mass);\r\n//         const intensity = optimizedTestGasMeasurementData.ion_currents[intensityIndex];\r\n//\r\n//         normIntensities[elementData.symbol] = intensity / calibrationFactors[elementData.symbol]\r\n//     })\r\n//     return normIntensities\r\n// }\r\n\r\nexport function checkProportions(testGasMixture: TestMixture[], proportions: Proportions) {\r\n    testGasMixture.map(obj => {\r\n        const amus_of_substance = proportions.filter(proportionsObj => proportionsObj.amu_proportions.amus.sort().join(',') === obj.atomic_masses.sort().join(','));\r\n        if (_.isEmpty(amus_of_substance)) {\r\n            throw new Error(\"The calibration data is insufficient to resolve the test gas. \" +\r\n                \"Please make sure that all substances in the test mixture where predefined in the calibration measurement (also with the same atomic masses!).\")\r\n        }\r\n    })\r\n}\r\n","import {\r\n    calcIonCurrentsForMoleculeAmus,\r\n    calcNormIonCurrents,\r\n    calcSensitivities,\r\n    checkProportions,\r\n    getIonCurrentsPerUniqAmu,\r\n    getMoleculesWithUniqAmus,\r\n    newOptimizeMeasurement, OptimizeCalibrationMeasurements\r\n} from \"./HelperFunctions\";\r\nimport {\r\n    CalibrationFactors,\r\n    Concentrations,\r\n    ICalibrationMixture,\r\n    PartialPressures,\r\n    Proportions, RawCalibrationMeasurements,\r\n    RawMeasurement,\r\n    Recipe,\r\n    ResolvedIonCurrents,\r\n    TestMixture\r\n} from \"./types\";\r\nimport * as _ from \"lodash\";\r\n\r\n\r\nexport function calcProportions(recipe: Recipe, calibrationMixture: ICalibrationMixture, completeMeasurement: RawCalibrationMeasurements): Proportions {\r\n    const measurement_data = OptimizeCalibrationMeasurements(recipe, calibrationMixture, completeMeasurement);\r\n\r\n    return calibrationMixture.map(obj => {\r\n        const measurement_data_subset = {\r\n            amus: obj.atomic_masses,\r\n            ion_currents: obj.atomic_masses.map((amu) => {\r\n                const index = measurement_data.amus.indexOf(amu);\r\n                return measurement_data.ion_currents[index]\r\n            })\r\n        };\r\n\r\n        const hundred_percent_peak_ion_current = _.max(measurement_data_subset[\"ion_currents\"]) || 0;\r\n\r\n        return {\r\n            symbol: obj.symbol,\r\n            amu_proportions: {\r\n                amus: measurement_data_subset.amus,\r\n                proportions: measurement_data_subset.ion_currents.map(ion_current => ion_current / hundred_percent_peak_ion_current)\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function calcPartialPressures(calibrationMixture: ICalibrationMixture, completeMeasurement: RawCalibrationMeasurements): PartialPressures {\r\n    const totalPressure = completeMeasurement.data[0][\"values\"][0];\r\n    return calibrationMixture.map(obj => {\r\n        return {\r\n            symbol: obj.symbol,\r\n            partialPressure: obj.concentration * totalPressure\r\n        }\r\n    })\r\n}\r\n\r\nexport function calcCalibrationFactors(calibrationMixture: ICalibrationMixture, recipe: Recipe, completeMeasurement: RawCalibrationMeasurements, partialPressures: PartialPressures, referenceElementSymbol: string): CalibrationFactors {\r\n    const measurement_data = OptimizeCalibrationMeasurements(recipe, calibrationMixture, completeMeasurement);\r\n    const sensitivities = calcSensitivities(calibrationMixture, partialPressures, measurement_data);\r\n    const reference_sensitivity = sensitivities.filter(obj => obj.symbol === referenceElementSymbol)[0][\"sensitivity\"];\r\n    const calibrationFactors = sensitivities.map(obj => {\r\n        return {\r\n            ...obj,\r\n            calibrationFactor: obj.sensitivity / reference_sensitivity\r\n        }\r\n    })\r\n    return calibrationFactors\r\n}\r\n\r\nexport function resolveIonCurrents(proportions: Proportions, lastCompleteMeasurement: RawMeasurement, testGasMixture: TestMixture[], recipe: Recipe): ResolvedIonCurrents {\r\n    const measurement_data = newOptimizeMeasurement(recipe, testGasMixture, lastCompleteMeasurement)\r\n    //check if all substances in testMixture have their proportions defined\r\n    checkProportions(testGasMixture, proportions)\r\n    const ion_currents_per_amu_per_molecule: ResolvedIonCurrents = [];\r\n    const remaining_mixture = [...testGasMixture];\r\n    while (remaining_mixture.length) {\r\n\r\n        const uniq_molecule_amus = getMoleculesWithUniqAmus(remaining_mixture);\r\n\r\n        if (uniq_molecule_amus.length === 0) {\r\n            throw new Error(\"There are to many overlapps in the atomic masses of the individual substances.\" +\r\n                \"Therefore the system of equations cannot be solved. Please try to use a different test gas mixture.\")\r\n        }\r\n\r\n\r\n        uniq_molecule_amus.forEach((uniqMolecule) => {\r\n            const proportion_object_for_uniq = _.flatten(proportions.filter(obj => obj.symbol === uniqMolecule!.symbol))[0];\r\n\r\n            const uniq_ion_currents_per_amu = getIonCurrentsPerUniqAmu(measurement_data, uniqMolecule);\r\n            const all_ion_currents = calcIonCurrentsForMoleculeAmus(proportion_object_for_uniq, measurement_data, uniqMolecule, uniq_ion_currents_per_amu);\r\n\r\n            ion_currents_per_amu_per_molecule.push({\r\n                symbol: uniqMolecule!.symbol,\r\n                amus: proportion_object_for_uniq.amu_proportions.amus,\r\n                ion_currents: all_ion_currents,\r\n                total_ion_current: _.sum(all_ion_currents)\r\n            })\r\n            _.remove(remaining_mixture, obj => obj.symbol === uniqMolecule!.symbol)\r\n        })\r\n    }\r\n    return ion_currents_per_amu_per_molecule\r\n}\r\n\r\nexport function calcConcentrations(testGasMixture: TestMixture[], calibrationFactors: CalibrationFactors, resolvedIonCurrents: ResolvedIonCurrents): Concentrations {\r\n    const norm_ion_currents = calcNormIonCurrents(resolvedIonCurrents, calibrationFactors);\r\n\r\n    const sum_norm_ion_currents = _.sum(norm_ion_currents.map(obj => obj.normIonCurrent));\r\n    const concentration_per_symbol_per_amu = norm_ion_currents.map(nic_obj => {\r\n        return {\r\n            symbol: nic_obj.symbol,\r\n            amu: nic_obj.amu,\r\n            concentration: nic_obj.normIonCurrent / sum_norm_ion_currents\r\n        }\r\n    });\r\n    const concentrations = testGasMixture.map(obj => {\r\n        const concentrationList = obj.atomic_masses.map(amu => {\r\n            return concentration_per_symbol_per_amu.filter(object => object.symbol === obj.symbol && object.amu === amu)[0].concentration\r\n        })\r\n        return {\r\n            symbol: obj.symbol,\r\n            amus: obj.atomic_masses,\r\n            concentrations: concentrationList,\r\n            total_concentration: _.sum(concentrationList)\r\n        }\r\n    });\r\n    return concentrations\r\n}\r\n"],"names":[],"mappings":"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YAEjI,MAAM,6BAA6B,GAAG,uBAAuB,CAAC,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACjG,MAAM,WAAW,GAAG,CAAC,gBAAgB,GAAG,sBAAsB,IAAI,6BAA6B,CAAC;AAEhG,YAAA,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC;AACtD,YAAA,OAAO,WAAW,CAAA;AACrB,SAAA;AACL,KAAC,CAAC,CAAA;AACN,CAAC;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEgB,SAAA,gBAAgB,CAAC,cAA6B,EAAE,WAAwB,EAAA;AACpF,IAAA,cAAc,CAAC,GAAG,CAAC,GAAG,IAAG;AACrB,QAAA,MAAM,iBAAiB,GAAG,WAAW,CAAC,MAAM,CAAC,cAAc,IAAI,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAC5J,QAAA,IAAI,CAAC,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"}